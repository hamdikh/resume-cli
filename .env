package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

type ProjectConfig struct {
	Prefix                        string            `json:"prefix"`
	Project                       string            `json:"project"`
	Environment                   string            `json:"environment"`
	Location                      string            `json:"location"`
	AksIlbSubnetAddressPrefix     string            `json:"aks_ilb_subnet_address_prefix"`
	AksClusterSubnetAddressPrefixes map[string]string `json:"aks_cluster_subnet_address_prefixes"`
}

type ClusterConfig struct {
	Cluster struct {
		Type                   string `json:"type"`
		KubernetesVersion      string `json:"kubernetes_version"`
		AksAgentPoolVmsize     string `json:"aks_agent_pool_vmsize"`
		AksSubnetAddressPrefix string `json:"aks_subnet_address_prefix"`
	} `json:"cluster"`
}

func main() {
	baseDir := "environment" // Base directory containing subscriptions

	err := filepath.Walk(baseDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() && isClusterDir(info.Name()) {
			projectDir := filepath.Dir(filepath.Dir(path))
			projectFile := filepath.Join(projectDir, "project.tfvars.json")
			clusterFile := filepath.Join(path, "cluster.tfvars.json")

			processCluster(projectFile, clusterFile, filepath.Base(path))
		}

		return nil
	})

	if err != nil {
		fmt.Printf("Error walking the path %q: %v\n", baseDir, err)
		return
	}
}

func isClusterDir(name string) bool {
	return name == "blue" || name == "green"
}

func processCluster(projectFile, clusterFile, clusterName string) {
	projectData, err := ioutil.ReadFile(projectFile)
	if err != nil {
		fmt.Printf("Error reading project file: %v\n", err)
		return
	}

	clusterData, err := ioutil.ReadFile(clusterFile)
	if err != nil {
		fmt.Printf("Error reading cluster file: %v\n", err)
		return
	}

	var projectConfig ProjectConfig
	var clusterConfig ClusterConfig

	err = json.Unmarshal(projectData, &projectConfig)
	if err != nil {
		fmt.Printf("Error unmarshaling project data: %v\n", err)
		return
	}

	err = json.Unmarshal(clusterData, &clusterConfig)
	if err != nil {
		fmt.Printf("Error unmarshaling cluster data: %v\n", err)
		return
	}

	if projectConfig.AksClusterSubnetAddressPrefixes == nil {
		projectConfig.AksClusterSubnetAddressPrefixes = make(map[string]string)
	}

	projectConfig.AksClusterSubnetAddressPrefixes[clusterName] = clusterConfig.Cluster.AksSubnetAddressPrefix
	clusterConfig.Cluster.AksSubnetAddressPrefix = ""

	projectData, err = json.MarshalIndent(projectConfig, "", "    ")
	if err != nil {
		fmt.Printf("Error marshaling project data: %v\n", err)
		return
	}

	clusterData, err = json.MarshalIndent(clusterConfig, "", "    ")
	if err != nil {
		fmt.Printf("Error marshaling cluster data: %v\n", err)
		return
	}

	err = ioutil.WriteFile(projectFile, projectData, 0644)
	if err != nil {
		fmt.Printf("Error writing project file: %v\n", err)
		return
	}

	err = ioutil.WriteFile(clusterFile, clusterData, 0644)
	if err != nil {
		fmt.Printf("Error writing cluster file: %v\n", err)
		return
	}

	fmt.Printf("Processed %s for project %s\n", clusterName, projectFile)
}
