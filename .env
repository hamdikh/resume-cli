package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
)

const (
	vnetResourceGroupName = "your-resource-group" // Replace with your resource group name
	vnetName              = "core-vnet"           // Replace with your VNet name
)

func main() {
	baseDir := "." // Base directory containing subscriptions
	subnetSuffixes := []string{"blue", "green", "yellow", "purple"}

	err := filepath.Walk(baseDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Check if the path is a project directory
		if info.IsDir() && filepath.Base(path) == "project.tfvars.json" {
			subscriptionDir := filepath.Dir(filepath.Dir(path))
			subscriptionID := filepath.Base(subscriptionDir)
			projectDir := filepath.Dir(path)
			projectFile := path

			subnets, err := getAzureSubnets(subscriptionID, vnetResourceGroupName, vnetName)
			if err != nil {
				fmt.Printf("Error retrieving Azure subnets: %v\n", err)
				return err
			}

			processProject(projectFile, subnets, subnetSuffixes)
		}

		return nil
	})

	if err != nil {
		fmt.Printf("Error walking the path %q: %v\n", baseDir, err)
		return
	}
}

func getAzureSubnets(subscriptionID, resourceGroupName, vnetName string) (map[string]string, error) {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		return nil, err
	}

	client, err := armnetwork.NewSubnetsClient(subscriptionID, cred, nil)
	if err != nil {
		return nil, err
	}

	pager := client.NewListPager(resourceGroupName, vnetName, nil)
	subnets := make(map[string]string)

	for pager.More() {
		page, err := pager.NextPage(context.Background())
		if err != nil {
			return nil, err
		}
		for _, subnet := range page.SubnetListResult.Value {
			subnets[*subnet.Name] = *subnet.Properties.AddressPrefix
		}
	}

	return subnets, nil
}

func processProject(projectFile string, azureSubnets map[string]string, subnetSuffixes []string) {
	projectData, err := ioutil.ReadFile(projectFile)
	if err != nil {
		fmt.Printf("Error reading project file: %v\n", err)
		return
	}

	var projectConfig map[string]interface{}
	err = json.Unmarshal(projectData, &projectConfig)
	if err != nil {
		fmt.Printf("Error unmarshaling project data: %v\n", err)
		return
	}

	if projectConfig["aks_cluster_subnet_address_prefixes"] == nil {
		projectConfig["aks_cluster_subnet_address_prefixes"] = make(map[string]interface{})
	}

	aksClusterSubnets, ok := projectConfig["aks_cluster_subnet_address_prefixes"].(map[string]interface{})
	if !ok {
		fmt.Printf("Error: 'aks_cluster_subnet_address_prefixes' is not a map in %s\n", projectFile)
		return
	}

	projectName, ok := projectConfig["project"].(string)
	if !ok {
		fmt.Printf("Error: 'project' key not found or not a string in %s\n", projectFile)
		return
	}

	// Add missing subnets from Azure VNet
	for _, suffix := range subnetSuffixes {
		matchedSuffix := fmt.Sprintf("aks-%s-%s", projectName, suffix)
		if _, exists := aksClusterSubnets[suffix]; !exists {
			if subnet, ok := azureSubnets[matchedSuffix]; ok {
				aksClusterSubnets[suffix] = subnet
			}
		}
	}

	projectData, err = json.MarshalIndent(projectConfig, "", "    ")
	if err != nil {
		fmt.Printf("Error marshaling project data: %v\n", err)
		return
	}

	err = ioutil.WriteFile(projectFile, projectData, 0644)
	if err != nil {
		fmt.Printf("Error writing project file: %v\n", err)
		return
	}

	fmt.Printf("Processed project %s\n", projectFile)
}
