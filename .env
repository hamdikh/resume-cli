package main

import (
	"errors"
	"fmt"
	"testing"
	"utils"

	"github.com/stretchr/testify/assert"
)

// MockGitClient is a mock implementation of the GitClient interface
type MockGitClient struct {
	PullFunc   func(filePath string) error
	AddFunc    func(filePath string) error
	DeleteFunc func(filePath string) error
	CommitFunc func(filePath string, message string) error
	PushFunc   func(filePath string) error
}

func (m *MockGitClient) Pull(filePath string) error {
	if m.PullFunc != nil {
		return m.PullFunc(filePath)
	}
	return nil
}

func (m *MockGitClient) Add(filePath string) error {
	if m.AddFunc != nil {
		return m.AddFunc(filePath)
	}
	return nil
}

func (m *MockGitClient) Delete(filePath string) error {
	if m.DeleteFunc != nil {
		return m.DeleteFunc(filePath)
	}
	return nil
}

func (m *MockGitClient) Commit(filePath string, message string) error {
	if m.CommitFunc != nil {
		return m.CommitFunc(filePath, message)
	}
	return nil
}

func (m *MockGitClient) Push(filePath string) error {
	if m.PushFunc != nil {
		return m.PushFunc(filePath)
	}
	return nil
}

// TestExecuteClusterCreate tests the executeClusterCreate function
func TestExecuteClusterCreate(t *testing.T) {
	// Define a test case
	testCases := []struct {
		name          string
		config        ClusterConfiguration
		mockGitClient *MockGitClient
		expectedError error
	}{
		{
			name: "Successful execution",
			config: ClusterConfiguration{
				Cluster:           "test-cluster",
				Project:           "test-project",
				Region:            "test-region",
				Subscription:      "test-subscription",
				Environment:       "test-environment",
				KubernetesVersion: "1.20.0",
				SubnetPrefix:      "10.0.0.0/24",
				FromLiteral:       "key=value",
				ModuleVersion:     "v1.0.0",
			},
			mockGitClient: &MockGitClient{
				AddFunc: func(filePath string) error {
					return nil
				},
				CommitFunc: func(filePath string, message string) error {
					return nil
				},
				PushFunc: func(filePath string) error {
					return nil
				},
			},
			expectedError: nil,
		},
		{
			name: "Add command fails",
			config: ClusterConfiguration{
				Cluster:           "test-cluster",
				Project:           "test-project",
				Region:            "test-region",
				Subscription:      "test-subscription",
				Environment:       "test-environment",
				KubernetesVersion: "1.20.0",
				SubnetPrefix:      "10.0.0.0/24",
				FromLiteral:       "key=value",
				ModuleVersion:     "v1.0.0",
			},
			mockGitClient: &MockGitClient{
				AddFunc: func(filePath string) error {
					return errors.New("git add failed")
				},
				CommitFunc: func(filePath string, message string) error {
					return nil
				},
				PushFunc: func(filePath string) error {
					return nil
				},
			},
			expectedError: fmt.Errorf("error adding file: %v", errors.New("git add failed")),
		},
		// Add more test cases as needed
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			err := executeClusterCreate(tc.config, tc.mockGitClient)
			if tc.expectedError != nil {
				assert.EqualError(t, err, tc.expectedError.Error())
			} else {
				assert.NoError(t, err)
			}
		})
	}
}
